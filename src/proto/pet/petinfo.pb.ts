// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: proto/pet/petinfo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ProtoPetAbilityValue, ProtoPetAbilityValueTotal, ProtoPetExtraAbilityItem } from "./ability.pb.js";
import { ProtoMintmarkInfo } from "./mintmark.pb.js";
import { ProtoResistanceInfo } from "./resist.pb.js";

export interface ProtoPetEffectInfo {
  id: number;
  level: number;
}

export interface ProtoPetInfo {
  petID: number;
  catchTime: number;
  lv: number;
  dv: number;
  EVs: ProtoPetAbilityValue | undefined;
  effect: ProtoPetEffectInfo | undefined;
  extraAbility: ProtoPetExtraAbilityItem[];
  mintmarks: ProtoMintmarkInfo[];
  effectItems: number[];
  abilityValues: ProtoPetAbilityValueTotal | undefined;
  skills: number[];
  fifthSkill?: number | undefined;
  soulmarkID?: number | undefined;
  resistance?: ProtoResistanceInfo | undefined;
  isAdvanced: boolean;
}

function createBaseProtoPetEffectInfo(): ProtoPetEffectInfo {
  return { id: 0, level: 0 };
}

export const ProtoPetEffectInfo: MessageFns<ProtoPetEffectInfo> = {
  encode(message: ProtoPetEffectInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.level !== 0) {
      writer.uint32(16).int32(message.level);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoPetEffectInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoPetEffectInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoPetEffectInfo {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
    };
  },

  toJSON(message: ProtoPetEffectInfo): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoPetEffectInfo>, I>>(base?: I): ProtoPetEffectInfo {
    return ProtoPetEffectInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoPetEffectInfo>, I>>(object: I): ProtoPetEffectInfo {
    const message = createBaseProtoPetEffectInfo();
    message.id = object.id ?? 0;
    message.level = object.level ?? 0;
    return message;
  },
};

function createBaseProtoPetInfo(): ProtoPetInfo {
  return {
    petID: 0,
    catchTime: 0,
    lv: 0,
    dv: 0,
    EVs: undefined,
    effect: undefined,
    extraAbility: [],
    mintmarks: [],
    effectItems: [],
    abilityValues: undefined,
    skills: [],
    fifthSkill: undefined,
    soulmarkID: undefined,
    resistance: undefined,
    isAdvanced: false,
  };
}

export const ProtoPetInfo: MessageFns<ProtoPetInfo> = {
  encode(message: ProtoPetInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.petID !== 0) {
      writer.uint32(8).int32(message.petID);
    }
    if (message.catchTime !== 0) {
      writer.uint32(16).int64(message.catchTime);
    }
    if (message.lv !== 0) {
      writer.uint32(24).int32(message.lv);
    }
    if (message.dv !== 0) {
      writer.uint32(32).int32(message.dv);
    }
    if (message.EVs !== undefined) {
      ProtoPetAbilityValue.encode(message.EVs, writer.uint32(42).fork()).join();
    }
    if (message.effect !== undefined) {
      ProtoPetEffectInfo.encode(message.effect, writer.uint32(50).fork()).join();
    }
    for (const v of message.extraAbility) {
      ProtoPetExtraAbilityItem.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.mintmarks) {
      ProtoMintmarkInfo.encode(v!, writer.uint32(66).fork()).join();
    }
    writer.uint32(74).fork();
    for (const v of message.effectItems) {
      writer.int32(v);
    }
    writer.join();
    if (message.abilityValues !== undefined) {
      ProtoPetAbilityValueTotal.encode(message.abilityValues, writer.uint32(82).fork()).join();
    }
    writer.uint32(90).fork();
    for (const v of message.skills) {
      writer.int32(v);
    }
    writer.join();
    if (message.fifthSkill !== undefined) {
      writer.uint32(96).int32(message.fifthSkill);
    }
    if (message.soulmarkID !== undefined) {
      writer.uint32(104).int32(message.soulmarkID);
    }
    if (message.resistance !== undefined) {
      ProtoResistanceInfo.encode(message.resistance, writer.uint32(114).fork()).join();
    }
    if (message.isAdvanced !== false) {
      writer.uint32(120).bool(message.isAdvanced);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoPetInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoPetInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.petID = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.catchTime = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.lv = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.dv = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.EVs = ProtoPetAbilityValue.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.effect = ProtoPetEffectInfo.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.extraAbility.push(ProtoPetExtraAbilityItem.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.mintmarks.push(ProtoMintmarkInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.effectItems.push(reader.int32());

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.effectItems.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.abilityValues = ProtoPetAbilityValueTotal.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag === 88) {
            message.skills.push(reader.int32());

            continue;
          }

          if (tag === 90) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.skills.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.fifthSkill = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.soulmarkID = reader.int32();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.resistance = ProtoResistanceInfo.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.isAdvanced = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoPetInfo {
    return {
      petID: isSet(object.petID) ? globalThis.Number(object.petID) : 0,
      catchTime: isSet(object.catchTime) ? globalThis.Number(object.catchTime) : 0,
      lv: isSet(object.lv) ? globalThis.Number(object.lv) : 0,
      dv: isSet(object.dv) ? globalThis.Number(object.dv) : 0,
      EVs: isSet(object.EVs) ? ProtoPetAbilityValue.fromJSON(object.EVs) : undefined,
      effect: isSet(object.effect) ? ProtoPetEffectInfo.fromJSON(object.effect) : undefined,
      extraAbility: globalThis.Array.isArray(object?.extraAbility)
        ? object.extraAbility.map((e: any) => ProtoPetExtraAbilityItem.fromJSON(e))
        : [],
      mintmarks: globalThis.Array.isArray(object?.mintmarks)
        ? object.mintmarks.map((e: any) => ProtoMintmarkInfo.fromJSON(e))
        : [],
      effectItems: globalThis.Array.isArray(object?.effectItems)
        ? object.effectItems.map((e: any) => globalThis.Number(e))
        : [],
      abilityValues: isSet(object.abilityValues) ? ProtoPetAbilityValueTotal.fromJSON(object.abilityValues) : undefined,
      skills: globalThis.Array.isArray(object?.skills) ? object.skills.map((e: any) => globalThis.Number(e)) : [],
      fifthSkill: isSet(object.fifthSkill) ? globalThis.Number(object.fifthSkill) : undefined,
      soulmarkID: isSet(object.soulmarkID) ? globalThis.Number(object.soulmarkID) : undefined,
      resistance: isSet(object.resistance) ? ProtoResistanceInfo.fromJSON(object.resistance) : undefined,
      isAdvanced: isSet(object.isAdvanced) ? globalThis.Boolean(object.isAdvanced) : false,
    };
  },

  toJSON(message: ProtoPetInfo): unknown {
    const obj: any = {};
    if (message.petID !== 0) {
      obj.petID = Math.round(message.petID);
    }
    if (message.catchTime !== 0) {
      obj.catchTime = Math.round(message.catchTime);
    }
    if (message.lv !== 0) {
      obj.lv = Math.round(message.lv);
    }
    if (message.dv !== 0) {
      obj.dv = Math.round(message.dv);
    }
    if (message.EVs !== undefined) {
      obj.EVs = ProtoPetAbilityValue.toJSON(message.EVs);
    }
    if (message.effect !== undefined) {
      obj.effect = ProtoPetEffectInfo.toJSON(message.effect);
    }
    if (message.extraAbility?.length) {
      obj.extraAbility = message.extraAbility.map((e) => ProtoPetExtraAbilityItem.toJSON(e));
    }
    if (message.mintmarks?.length) {
      obj.mintmarks = message.mintmarks.map((e) => ProtoMintmarkInfo.toJSON(e));
    }
    if (message.effectItems?.length) {
      obj.effectItems = message.effectItems.map((e) => Math.round(e));
    }
    if (message.abilityValues !== undefined) {
      obj.abilityValues = ProtoPetAbilityValueTotal.toJSON(message.abilityValues);
    }
    if (message.skills?.length) {
      obj.skills = message.skills.map((e) => Math.round(e));
    }
    if (message.fifthSkill !== undefined) {
      obj.fifthSkill = Math.round(message.fifthSkill);
    }
    if (message.soulmarkID !== undefined) {
      obj.soulmarkID = Math.round(message.soulmarkID);
    }
    if (message.resistance !== undefined) {
      obj.resistance = ProtoResistanceInfo.toJSON(message.resistance);
    }
    if (message.isAdvanced !== false) {
      obj.isAdvanced = message.isAdvanced;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoPetInfo>, I>>(base?: I): ProtoPetInfo {
    return ProtoPetInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoPetInfo>, I>>(object: I): ProtoPetInfo {
    const message = createBaseProtoPetInfo();
    message.petID = object.petID ?? 0;
    message.catchTime = object.catchTime ?? 0;
    message.lv = object.lv ?? 0;
    message.dv = object.dv ?? 0;
    message.EVs = (object.EVs !== undefined && object.EVs !== null)
      ? ProtoPetAbilityValue.fromPartial(object.EVs)
      : undefined;
    message.effect = (object.effect !== undefined && object.effect !== null)
      ? ProtoPetEffectInfo.fromPartial(object.effect)
      : undefined;
    message.extraAbility = object.extraAbility?.map((e) => ProtoPetExtraAbilityItem.fromPartial(e)) || [];
    message.mintmarks = object.mintmarks?.map((e) => ProtoMintmarkInfo.fromPartial(e)) || [];
    message.effectItems = object.effectItems?.map((e) => e) || [];
    message.abilityValues = (object.abilityValues !== undefined && object.abilityValues !== null)
      ? ProtoPetAbilityValueTotal.fromPartial(object.abilityValues)
      : undefined;
    message.skills = object.skills?.map((e) => e) || [];
    message.fifthSkill = object.fifthSkill ?? undefined;
    message.soulmarkID = object.soulmarkID ?? undefined;
    message.resistance = (object.resistance !== undefined && object.resistance !== null)
      ? ProtoResistanceInfo.fromPartial(object.resistance)
      : undefined;
    message.isAdvanced = object.isAdvanced ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
