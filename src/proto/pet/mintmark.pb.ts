// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: proto/pet/mintmark.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ProtoPetAbilityValue } from "./ability.pb.js";

export enum ProtoMintmarkType {
  UNSPECIFIED = "UNSPECIFIED",
  SKILL = "SKILL",
  ABILITY = "ABILITY",
  UNIVERSAL = "UNIVERSAL",
  QUANXIAO = "QUANXIAO",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function protoMintmarkTypeFromJSON(object: any): ProtoMintmarkType {
  switch (object) {
    case 0:
    case "UNSPECIFIED":
      return ProtoMintmarkType.UNSPECIFIED;
    case 1:
    case "SKILL":
      return ProtoMintmarkType.SKILL;
    case 2:
    case "ABILITY":
      return ProtoMintmarkType.ABILITY;
    case 3:
    case "UNIVERSAL":
      return ProtoMintmarkType.UNIVERSAL;
    case 4:
    case "QUANXIAO":
      return ProtoMintmarkType.QUANXIAO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProtoMintmarkType.UNRECOGNIZED;
  }
}

export function protoMintmarkTypeToJSON(object: ProtoMintmarkType): string {
  switch (object) {
    case ProtoMintmarkType.UNSPECIFIED:
      return "UNSPECIFIED";
    case ProtoMintmarkType.SKILL:
      return "SKILL";
    case ProtoMintmarkType.ABILITY:
      return "ABILITY";
    case ProtoMintmarkType.UNIVERSAL:
      return "UNIVERSAL";
    case ProtoMintmarkType.QUANXIAO:
      return "QUANXIAO";
    case ProtoMintmarkType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function protoMintmarkTypeToNumber(object: ProtoMintmarkType): number {
  switch (object) {
    case ProtoMintmarkType.UNSPECIFIED:
      return 0;
    case ProtoMintmarkType.SKILL:
      return 1;
    case ProtoMintmarkType.ABILITY:
      return 2;
    case ProtoMintmarkType.UNIVERSAL:
      return 3;
    case ProtoMintmarkType.QUANXIAO:
      return 4;
    case ProtoMintmarkType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface ProtoGemItem {
  category: number;
  level: number;
}

export interface ProtoSkillMintmarkInfo {
  type: ProtoMintmarkType;
  id: number;
  skillID: number;
}

export interface ProtoAbilityMintmarkInfo {
  type: ProtoMintmarkType;
  id: number;
  AbilityValues: ProtoPetAbilityValue | undefined;
}

export interface ProtoUniversalMintmarkInfo {
  type: ProtoMintmarkType;
  id: number;
  AbilityValues: ProtoPetAbilityValue | undefined;
  classID: number;
  gem: ProtoGemItem | undefined;
}

export interface ProtoQuanxiaoMintmarkInfo {
  type: ProtoMintmarkType;
  id: number;
  AbilityValues: ProtoPetAbilityValue | undefined;
  skillID: number;
}

export interface ProtoMintmarkInfo {
  mintmark?:
    | //
    { $case: "skill"; value: ProtoSkillMintmarkInfo }
    | //
    { $case: "ability"; value: ProtoAbilityMintmarkInfo }
    | //
    { $case: "universal"; value: ProtoUniversalMintmarkInfo }
    | //
    { $case: "quanxiao"; value: ProtoQuanxiaoMintmarkInfo }
    | undefined;
}

function createBaseProtoGemItem(): ProtoGemItem {
  return { category: 0, level: 0 };
}

export const ProtoGemItem: MessageFns<ProtoGemItem> = {
  encode(message: ProtoGemItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.category !== 0) {
      writer.uint32(8).int32(message.category);
    }
    if (message.level !== 0) {
      writer.uint32(16).int32(message.level);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoGemItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoGemItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.category = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoGemItem {
    return {
      category: isSet(object.category) ? globalThis.Number(object.category) : 0,
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
    };
  },

  toJSON(message: ProtoGemItem): unknown {
    const obj: any = {};
    if (message.category !== 0) {
      obj.category = Math.round(message.category);
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoGemItem>, I>>(base?: I): ProtoGemItem {
    return ProtoGemItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoGemItem>, I>>(object: I): ProtoGemItem {
    const message = createBaseProtoGemItem();
    message.category = object.category ?? 0;
    message.level = object.level ?? 0;
    return message;
  },
};

function createBaseProtoSkillMintmarkInfo(): ProtoSkillMintmarkInfo {
  return { type: ProtoMintmarkType.UNSPECIFIED, id: 0, skillID: 0 };
}

export const ProtoSkillMintmarkInfo: MessageFns<ProtoSkillMintmarkInfo> = {
  encode(message: ProtoSkillMintmarkInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== ProtoMintmarkType.UNSPECIFIED) {
      writer.uint32(8).int32(protoMintmarkTypeToNumber(message.type));
    }
    if (message.id !== 0) {
      writer.uint32(16).int32(message.id);
    }
    if (message.skillID !== 0) {
      writer.uint32(24).int32(message.skillID);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoSkillMintmarkInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoSkillMintmarkInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = protoMintmarkTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.skillID = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoSkillMintmarkInfo {
    return {
      type: isSet(object.type) ? protoMintmarkTypeFromJSON(object.type) : ProtoMintmarkType.UNSPECIFIED,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      skillID: isSet(object.skillID) ? globalThis.Number(object.skillID) : 0,
    };
  },

  toJSON(message: ProtoSkillMintmarkInfo): unknown {
    const obj: any = {};
    if (message.type !== ProtoMintmarkType.UNSPECIFIED) {
      obj.type = protoMintmarkTypeToJSON(message.type);
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.skillID !== 0) {
      obj.skillID = Math.round(message.skillID);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoSkillMintmarkInfo>, I>>(base?: I): ProtoSkillMintmarkInfo {
    return ProtoSkillMintmarkInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoSkillMintmarkInfo>, I>>(object: I): ProtoSkillMintmarkInfo {
    const message = createBaseProtoSkillMintmarkInfo();
    message.type = object.type ?? ProtoMintmarkType.UNSPECIFIED;
    message.id = object.id ?? 0;
    message.skillID = object.skillID ?? 0;
    return message;
  },
};

function createBaseProtoAbilityMintmarkInfo(): ProtoAbilityMintmarkInfo {
  return { type: ProtoMintmarkType.UNSPECIFIED, id: 0, AbilityValues: undefined };
}

export const ProtoAbilityMintmarkInfo: MessageFns<ProtoAbilityMintmarkInfo> = {
  encode(message: ProtoAbilityMintmarkInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== ProtoMintmarkType.UNSPECIFIED) {
      writer.uint32(8).int32(protoMintmarkTypeToNumber(message.type));
    }
    if (message.id !== 0) {
      writer.uint32(16).int32(message.id);
    }
    if (message.AbilityValues !== undefined) {
      ProtoPetAbilityValue.encode(message.AbilityValues, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoAbilityMintmarkInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoAbilityMintmarkInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = protoMintmarkTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.AbilityValues = ProtoPetAbilityValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoAbilityMintmarkInfo {
    return {
      type: isSet(object.type) ? protoMintmarkTypeFromJSON(object.type) : ProtoMintmarkType.UNSPECIFIED,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      AbilityValues: isSet(object.AbilityValues) ? ProtoPetAbilityValue.fromJSON(object.AbilityValues) : undefined,
    };
  },

  toJSON(message: ProtoAbilityMintmarkInfo): unknown {
    const obj: any = {};
    if (message.type !== ProtoMintmarkType.UNSPECIFIED) {
      obj.type = protoMintmarkTypeToJSON(message.type);
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.AbilityValues !== undefined) {
      obj.AbilityValues = ProtoPetAbilityValue.toJSON(message.AbilityValues);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoAbilityMintmarkInfo>, I>>(base?: I): ProtoAbilityMintmarkInfo {
    return ProtoAbilityMintmarkInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoAbilityMintmarkInfo>, I>>(object: I): ProtoAbilityMintmarkInfo {
    const message = createBaseProtoAbilityMintmarkInfo();
    message.type = object.type ?? ProtoMintmarkType.UNSPECIFIED;
    message.id = object.id ?? 0;
    message.AbilityValues = (object.AbilityValues !== undefined && object.AbilityValues !== null)
      ? ProtoPetAbilityValue.fromPartial(object.AbilityValues)
      : undefined;
    return message;
  },
};

function createBaseProtoUniversalMintmarkInfo(): ProtoUniversalMintmarkInfo {
  return { type: ProtoMintmarkType.UNSPECIFIED, id: 0, AbilityValues: undefined, classID: 0, gem: undefined };
}

export const ProtoUniversalMintmarkInfo: MessageFns<ProtoUniversalMintmarkInfo> = {
  encode(message: ProtoUniversalMintmarkInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== ProtoMintmarkType.UNSPECIFIED) {
      writer.uint32(8).int32(protoMintmarkTypeToNumber(message.type));
    }
    if (message.id !== 0) {
      writer.uint32(16).int32(message.id);
    }
    if (message.AbilityValues !== undefined) {
      ProtoPetAbilityValue.encode(message.AbilityValues, writer.uint32(26).fork()).join();
    }
    if (message.classID !== 0) {
      writer.uint32(32).int32(message.classID);
    }
    if (message.gem !== undefined) {
      ProtoGemItem.encode(message.gem, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoUniversalMintmarkInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoUniversalMintmarkInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = protoMintmarkTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.AbilityValues = ProtoPetAbilityValue.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.classID = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.gem = ProtoGemItem.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoUniversalMintmarkInfo {
    return {
      type: isSet(object.type) ? protoMintmarkTypeFromJSON(object.type) : ProtoMintmarkType.UNSPECIFIED,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      AbilityValues: isSet(object.AbilityValues) ? ProtoPetAbilityValue.fromJSON(object.AbilityValues) : undefined,
      classID: isSet(object.classID) ? globalThis.Number(object.classID) : 0,
      gem: isSet(object.gem) ? ProtoGemItem.fromJSON(object.gem) : undefined,
    };
  },

  toJSON(message: ProtoUniversalMintmarkInfo): unknown {
    const obj: any = {};
    if (message.type !== ProtoMintmarkType.UNSPECIFIED) {
      obj.type = protoMintmarkTypeToJSON(message.type);
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.AbilityValues !== undefined) {
      obj.AbilityValues = ProtoPetAbilityValue.toJSON(message.AbilityValues);
    }
    if (message.classID !== 0) {
      obj.classID = Math.round(message.classID);
    }
    if (message.gem !== undefined) {
      obj.gem = ProtoGemItem.toJSON(message.gem);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoUniversalMintmarkInfo>, I>>(base?: I): ProtoUniversalMintmarkInfo {
    return ProtoUniversalMintmarkInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoUniversalMintmarkInfo>, I>>(object: I): ProtoUniversalMintmarkInfo {
    const message = createBaseProtoUniversalMintmarkInfo();
    message.type = object.type ?? ProtoMintmarkType.UNSPECIFIED;
    message.id = object.id ?? 0;
    message.AbilityValues = (object.AbilityValues !== undefined && object.AbilityValues !== null)
      ? ProtoPetAbilityValue.fromPartial(object.AbilityValues)
      : undefined;
    message.classID = object.classID ?? 0;
    message.gem = (object.gem !== undefined && object.gem !== null) ? ProtoGemItem.fromPartial(object.gem) : undefined;
    return message;
  },
};

function createBaseProtoQuanxiaoMintmarkInfo(): ProtoQuanxiaoMintmarkInfo {
  return { type: ProtoMintmarkType.UNSPECIFIED, id: 0, AbilityValues: undefined, skillID: 0 };
}

export const ProtoQuanxiaoMintmarkInfo: MessageFns<ProtoQuanxiaoMintmarkInfo> = {
  encode(message: ProtoQuanxiaoMintmarkInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== ProtoMintmarkType.UNSPECIFIED) {
      writer.uint32(8).int32(protoMintmarkTypeToNumber(message.type));
    }
    if (message.id !== 0) {
      writer.uint32(16).int32(message.id);
    }
    if (message.AbilityValues !== undefined) {
      ProtoPetAbilityValue.encode(message.AbilityValues, writer.uint32(26).fork()).join();
    }
    if (message.skillID !== 0) {
      writer.uint32(32).int32(message.skillID);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoQuanxiaoMintmarkInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoQuanxiaoMintmarkInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = protoMintmarkTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.AbilityValues = ProtoPetAbilityValue.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.skillID = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoQuanxiaoMintmarkInfo {
    return {
      type: isSet(object.type) ? protoMintmarkTypeFromJSON(object.type) : ProtoMintmarkType.UNSPECIFIED,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      AbilityValues: isSet(object.AbilityValues) ? ProtoPetAbilityValue.fromJSON(object.AbilityValues) : undefined,
      skillID: isSet(object.skillID) ? globalThis.Number(object.skillID) : 0,
    };
  },

  toJSON(message: ProtoQuanxiaoMintmarkInfo): unknown {
    const obj: any = {};
    if (message.type !== ProtoMintmarkType.UNSPECIFIED) {
      obj.type = protoMintmarkTypeToJSON(message.type);
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.AbilityValues !== undefined) {
      obj.AbilityValues = ProtoPetAbilityValue.toJSON(message.AbilityValues);
    }
    if (message.skillID !== 0) {
      obj.skillID = Math.round(message.skillID);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoQuanxiaoMintmarkInfo>, I>>(base?: I): ProtoQuanxiaoMintmarkInfo {
    return ProtoQuanxiaoMintmarkInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoQuanxiaoMintmarkInfo>, I>>(object: I): ProtoQuanxiaoMintmarkInfo {
    const message = createBaseProtoQuanxiaoMintmarkInfo();
    message.type = object.type ?? ProtoMintmarkType.UNSPECIFIED;
    message.id = object.id ?? 0;
    message.AbilityValues = (object.AbilityValues !== undefined && object.AbilityValues !== null)
      ? ProtoPetAbilityValue.fromPartial(object.AbilityValues)
      : undefined;
    message.skillID = object.skillID ?? 0;
    return message;
  },
};

function createBaseProtoMintmarkInfo(): ProtoMintmarkInfo {
  return { mintmark: undefined };
}

export const ProtoMintmarkInfo: MessageFns<ProtoMintmarkInfo> = {
  encode(message: ProtoMintmarkInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.mintmark?.$case) {
      case "skill":
        ProtoSkillMintmarkInfo.encode(message.mintmark.value, writer.uint32(10).fork()).join();
        break;
      case "ability":
        ProtoAbilityMintmarkInfo.encode(message.mintmark.value, writer.uint32(18).fork()).join();
        break;
      case "universal":
        ProtoUniversalMintmarkInfo.encode(message.mintmark.value, writer.uint32(26).fork()).join();
        break;
      case "quanxiao":
        ProtoQuanxiaoMintmarkInfo.encode(message.mintmark.value, writer.uint32(34).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoMintmarkInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoMintmarkInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mintmark = { $case: "skill", value: ProtoSkillMintmarkInfo.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mintmark = { $case: "ability", value: ProtoAbilityMintmarkInfo.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.mintmark = { $case: "universal", value: ProtoUniversalMintmarkInfo.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.mintmark = { $case: "quanxiao", value: ProtoQuanxiaoMintmarkInfo.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoMintmarkInfo {
    return {
      mintmark: isSet(object.skill)
        ? { $case: "skill", value: ProtoSkillMintmarkInfo.fromJSON(object.skill) }
        : isSet(object.ability)
        ? { $case: "ability", value: ProtoAbilityMintmarkInfo.fromJSON(object.ability) }
        : isSet(object.universal)
        ? { $case: "universal", value: ProtoUniversalMintmarkInfo.fromJSON(object.universal) }
        : isSet(object.quanxiao)
        ? { $case: "quanxiao", value: ProtoQuanxiaoMintmarkInfo.fromJSON(object.quanxiao) }
        : undefined,
    };
  },

  toJSON(message: ProtoMintmarkInfo): unknown {
    const obj: any = {};
    if (message.mintmark?.$case === "skill") {
      obj.skill = ProtoSkillMintmarkInfo.toJSON(message.mintmark.value);
    }
    if (message.mintmark?.$case === "ability") {
      obj.ability = ProtoAbilityMintmarkInfo.toJSON(message.mintmark.value);
    }
    if (message.mintmark?.$case === "universal") {
      obj.universal = ProtoUniversalMintmarkInfo.toJSON(message.mintmark.value);
    }
    if (message.mintmark?.$case === "quanxiao") {
      obj.quanxiao = ProtoQuanxiaoMintmarkInfo.toJSON(message.mintmark.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoMintmarkInfo>, I>>(base?: I): ProtoMintmarkInfo {
    return ProtoMintmarkInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoMintmarkInfo>, I>>(object: I): ProtoMintmarkInfo {
    const message = createBaseProtoMintmarkInfo();
    if (object.mintmark?.$case === "skill" && object.mintmark?.value !== undefined && object.mintmark?.value !== null) {
      message.mintmark = { $case: "skill", value: ProtoSkillMintmarkInfo.fromPartial(object.mintmark.value) };
    }
    if (
      object.mintmark?.$case === "ability" && object.mintmark?.value !== undefined && object.mintmark?.value !== null
    ) {
      message.mintmark = { $case: "ability", value: ProtoAbilityMintmarkInfo.fromPartial(object.mintmark.value) };
    }
    if (
      object.mintmark?.$case === "universal" && object.mintmark?.value !== undefined && object.mintmark?.value !== null
    ) {
      message.mintmark = { $case: "universal", value: ProtoUniversalMintmarkInfo.fromPartial(object.mintmark.value) };
    }
    if (
      object.mintmark?.$case === "quanxiao" && object.mintmark?.value !== undefined && object.mintmark?.value !== null
    ) {
      message.mintmark = { $case: "quanxiao", value: ProtoQuanxiaoMintmarkInfo.fromPartial(object.mintmark.value) };
    }
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
